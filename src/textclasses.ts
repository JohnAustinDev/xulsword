/* eslint-disable prettier/prettier */
// TextClasses below is valid with LibXulSword 1.3.1+
// TextClasses is an object used to parse information from element classes
// and titles. Many of these are generated by libxulsword. The TextClasses object
// is mainly used by the getElementInfo function below to retrieve any relevant
// info from an arbitrary DOM element. DOM elements must of course have their class
// and title pattern(s) included in TextClasses for their infos to be retreivable.
// The TextClasses class must always be the first class in the element's
// class list, and only the part before any "-" defines its TextClasses class.
// If a null parameter value exists for a particular class expression, this
// signifies the value should be provided by context. NOTE: the sr,
// dt, and dtl class may have multiple ";" or " " separated references
// in their titles.

export type TextInfo = {
  type: string | null;
  title: string | null;
  reflist: string[] | null;
  bk: string | null;
  ch: string | number | null;
  vs: number | null;
  lv: number | null;
  mod: string | null;
  osisref: string | null;
  nid: number | null;
  ntype: string | null;
}

type TextInfoIndex = {
  [key in keyof TextInfo]?: number|null;
}

type Value = TextInfoIndex & {
  re: RegExp
}

type TextClassesType = {
  vs: Value[]; // verse
  fn: Value[]; // textual footnote marker (in verse-key modules)
  gfn: Value[]; // textual footnote marker (in non-verse-key modules)
  cr: Value[]; // cross-reference note marker in verse-key modules (may include a list of references)
  un: Value[]; // user note marker
  sr: Value[]; // scripture reference link
  dt: Value[]; // x-glossary link
  dtl: Value[]; // x-glosslink link or dictionary target-self link
  snbut: Value[]; // strong's number search button
  slist: Value[]; // member of LibSword search results list
  nlist: Value[]; // member of LibSword note list
  fnrow: Value[]; // notebox note-list row
  fnlink: Value[]; // notebox note-list row source link
  crref: Value[]; // notebox note-list cross-reference link
  listenlink: Value[]; // audio link
};

const TextClasses: TextClassesType = {
  vs:     [ { re:new RegExp(/^(([^.]+)\.(\d+)\.(\d+))\.(\d+)\.([^.]+)$/),                                      bk:2,    ch:3,     vs:4,    lv:5,     mod:6, osisref:1 } ],
  fn:     [ { re:new RegExp(/^(\d+)\.(unavailable)\.([^.]+)$/),                                         nid:1, bk:null, ch:null,  vs:null, lv:null,  mod:3, osisref:2 },
            { re:new RegExp(/^(\d+)\.(([^.]+)\.(\d+)\.(\d+))\.([^.]+)$/),                               nid:1, bk:3,    ch:4,     vs:5,    lv:5,     mod:6, osisref:2 } ],
  cr:     [ { re:new RegExp(/^(\d+)\.(([^.]+)\.(\d+)\.(\d+))\.([^.]+)$/),                               nid:1, bk:3,    ch:4,     vs:5,    lv:5,     mod:6, osisref:2 } ],
  un:     [ { re:new RegExp(/^(.+?)\.(([^.]+)\.(\d+)\.(\d+))\.([^.]+)$/),                               nid:1, bk:3,    ch:4,     vs:5,    lv:5,     mod:6, osisref:2 },
            { re:new RegExp(/^(.+?)\.[^.]+\.(.*)\.(\d+)\.([^.]+)$/),                                    nid:1, bk:null, ch:2,     vs:3,    lv:3,     mod:4 } ],
  sr:     [ { re:new RegExp(/^(unavailable)\.([^.]+)$/),                                            reflist:1, bk:null, ch:null,  vs:null, lv:null,  mod:2, osisref:1 },
            { re:new RegExp(/^((([^.]+)\.(\d+)\.(\d+))(;.*?)?)\.([^.]+)$/),                         reflist:1, bk:3,    ch:4,     vs:5,    lv:5,     mod:7, osisref:2 },
            { re:new RegExp(/^((([^.]+)\.(\d+)\.(\d+)\s*-\s*[^.]+\.\d+\.(\d+))(;.*?)?)\.([^.]+)$/), reflist:1, bk:3,    ch:4,     vs:5,    lv:6,     mod:8, osisref:2 },
            { re:new RegExp(/^(.*?)\.([^.]+)$/),                                                    reflist:1, bk:null, ch:null,  vs:null, lv:null,  mod:2 } ],
  gfn:    [ { re:new RegExp (/^(\d+)\.(fn|cr)\.(.*?)$/),                                           ntype:2, nid:1,                                   mod:3 } ],
  // dt and dtl allow [:.] as delineator for backward compatibility < 2.23 ([:] is correct)
  dt:     [ { re:new RegExp(/^((([^:.]+)[:.]([^.]+))(\s+[^:.]+[:.][^.]+)?)\.([^.]+)$/),      reflist:1, bk:null, ch:4,    vs:null, lv:null, mod:3, osisref:2 } ],
  dtl:    [ { re:new RegExp(/^((([^:.]+)[:.]([^.]+))(\s+[^:.]+[:.][^.]+)?)\.([^.]+)$/),      reflist:1, bk:null, ch:4,    vs:null, lv:null, mod:3, osisref:2 } ],
  snbut:  [ { re:new RegExp(/^((\S+):(\S+))\.([^.]+)$/),                                                        bk:null, ch:3,     vs:null, lv:null, mod:4, osisref:1 } ],
  fnrow:  [ { re:new RegExp(/^([^.]+)\.(([^.]+)\.(\d+)\.(\d+))\.([^.]+)$/),                              nid:1, bk:3,    ch:4,     vs:5,    lv:5,    mod:6, osisref:2 } ],
  fnlink: [ { re:new RegExp(/^([^.]*)\.(([^.]+)\.(\d+)\.(\d+))\.([^.]+)$/),                              nid:1, bk:3,    ch:4,     vs:5,    lv:5,    mod:6, osisref:2 } ],
  crref:  [ { re:new RegExp(/^(([^.]+)\.(\d+)\.(\d+))\.([^.]+)$/),                                              bk:2,    ch:3,     vs:4,    lv:4,    mod:5, osisref:1 },
            { re:new RegExp(/^(([^.]+)\.(\d+)\.(\d+)\.(\d+))\.([^.]+)$/),                                       bk:2,    ch:3,     vs:4,    lv:5,    mod:6, osisref:1 } ],
  nlist:  [ { re:new RegExp(/^(\w+)\.([^.]*)\.(([^.]+)\.(\d+)\.(\d+))\.([^.]+)$/),              ntype:1, nid:2, bk:4,    ch:5,     vs:6,    lv:6,    mod:7, osisref:3 },
            { re:new RegExp(/^(\w+)\.([^.]*)\.(([^.]+)(\.(0)(\.(0))?)?)\.([^.]+)$/),            ntype:1, nid:2, bk:4,    ch:6,     vs:8,    lv:8,    mod:9, osisref:3 },
            { re:new RegExp(/^(un)\.([^.]*)\.[^.]*\.(.*)\.(\d+)\.([^.]+)$/),                    ntype:1, nid:2, bk:null, ch:3,     vs:4,    lv:4,    mod:5 } ],
  slist:  [ { re:new RegExp(/^([^.]*)\.([^.]*)$/),                                                              bk:null, ch:1,     vs:null, lv:null, mod:2 },
            { re:new RegExp(/^(([^.]*)\.(\d+)\.(\d+))\.([^.]*)$/),                                              bk:2,    ch:3,     vs:4,    lv:4,    mod:5, osisref:1 } ],
  listenlink: [ { re:new RegExp(/^(([^.]+)\.(.*?)\.(\d+))\.([^.]+)$/),                                          bk:2,    ch:3,     vs:4,    lv:4,    mod:5, osisref:1 } ],
};

export default TextClasses as TextClassesType;
