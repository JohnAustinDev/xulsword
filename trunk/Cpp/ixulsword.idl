/*******************************************************************************

TO CREATE AND USE THE XPCOM BIBLE OBJECTS IN JAVASCRIPT:

First create a Bible object and check that modules are available like this:

  Bible = Components.classes["@xulsword.com/xulsword/xulsword;1"].
                createInstance(Components.interfaces.ixulsword);
  var mlist = Bible.getModuleList();
  if (mlist == "No Modules" || mlist.search(BIBLE)==-1) Bible=null;
  
YOU MUST CHECK THAT THE BIBLE OBJECT HAS MODULES BECAUSE TRYING TO USE IT  
WITHOUT MODULES MAY CAUSE YOUR PROGRAM TO CRASH! MK ALSO REQUIRES AT 
LEAST ONE BIBLE MODULE TO RUN.

The following is the list of XPCOM functions to use with Bible objects. 
IMPORTANT NOTE: Book, Chapter, and Verse are STATIC variables and therefore will
share common values in ALL Bible instances. Also, Bibles may have different verse 
systems. Therefore, when setting the static Book, Chapter and Verse variables, the
Version (and thereby the verse system) must also be provided. Psalm 10 in RSTE is
not the same text as Psalm 10 in UZV for instance.


SPECIAL MODULE CONFIGURATION PARAMETERS (OPTIONAL):
Valid for all modules:
  "TabLabel" - Label to use on the module's tab (of not specified by the locale)
  "Font" - The font to use for the module
  "FontSizeAdjust" - The relative size of the module's font
  "LineHeight" - The relative line height of the module's font
  
Valid for Bible modules:
  "OriginalTabTestament" - If set to "OT" or "NT", an ORIG tab will be available,
      and this module will be shown (in interlinear format) when it is activated.
  "DictionaryModule" - Associate a dictionary with the module. There may be 
      more than one DictionaryModule entry.
  "ProducedFor" - Should be set to "xulsword" for all MK's native Bible modules. 
      It allows us to know if we should use xulsword's security features or not.
  "AudioCode" - Audio files located in this directory (within the Audio dir) will
      be avaialble in this Bible module.
  
Valid for Dictionary modules:
  "LangSortOrder" - Allows to sort entries alphabetically
  "ReferenceBible" - Bible module to use for Scripture references.


DEFINITION OF A "XULSWORD REFERENCE":
  "xulsword reference"s never cross chapter boundaries. The smallest reference
  is to a single verse, and the largest is to a whole chapter. "xulsword reference"s
  must take one of the following forms:
  
  Preffered forms (because most MK subroutines use these forms). These forms are 
  often refered to as "location"s in MK:
    Gen.5             --> Genesis chapter 5 (in this case Verse=1 and LastVerse=maxverse)
    Gen.5.6           --> Genesis chapter 5 verse 6 (in this case LastVerse=Verse)
    Gen.5.6.7         --> Genesis chapter 5 verses 6 through 7
    
  Other valid forms (but may need subsequent conversion for use by some subroutines in MK):
    Gen 5             --> same as Gen.5
    Gen 5:6           --> same as Gen.5.6
    Gen 5:6-7         --> same as Gen.5.6.7
    
  Valid form, but may not always return what is expected:
    Gen 5:6 - Gen 5:7 --> same as Gen.5.6.7 but note that the book and chapter
                          number mentioned after the "-" are completely ignored, 
                          and only the verse is used (because xulsword references 
                          can never cross chapter boundaries).

*******************************************************************************/

#include "nsISupports.idl"

[scriptable, uuid(12029087-D9DB-4688-A032-A560DFFBEE57)]
interface ixulsword : nsISupports
{

/*******************************************************************************
* GETTING BIBLE TEXT AND BIBLE LOCATION INFORMATION:
*******************************************************************************/
  AString setBiblesReference(in ACString Mod, in AString Vkeytext);
    //Choose the Bible reference for all ixulsword instances to work with (it sets 
    //  the static Book, Chapter, Verse, Lastverse variables as desribed using 
    //  the verse system of Mod). 
    //Vkeytext is a "xulsword reference" (see definition above).
    //returns versification of Mod.
                                                   
  AString setVerse(in ACString Mod, in long firstverse, in long lastverse);
    //Sets static Verse and Lastverse variables (applies to ALL Bible instances).
    //  Book and Chapter remain whatever they were previously set to.
    //firstverse:
    //  If firstverse is 0 then no verse is selected.
    //  If firstverse is -1 then Verse will be set to the current chapter's max-verse. 
    //  If firstverse is greater then max-verse then Verse equals max-verse. 
    //lastverse:
    //  Lastverse will always be: verse >= lastVerse <= max-verse.
    
  AString getLocation(in ACString Mod);
    //Returns current location as described using the verse system of module Mod; 
    //Returns in the form: Gen.1.2.5 (meaning Genesis 1:2-5)
  
  AString getBookName();
    //Returns current short book name, "Gen" for instance.
  
  AString getChapter(in ACString Mod);
    //Returns current Book and Chapter as described using the verse system of module Mod.
    //Returns in the form: "Gen 3"
    
  long getVerseNumber(in ACString Mod);
    //Returns current Verse number as described using the verse system of module Mod.
    
  long getLastVerseNumber(in ACString Mod);
    //Returns current Lastverse number as described using the verse system of module Mod.
    
  long getChapterNumber(in ACString Mod);
    //Returns current Chapter number as described using the verse system of module Mod.
    
  AString getChapterText(in ACString Vkeymod);
    //Will return a chapter of text with footnote markers from module Vkeymod.
    //Vkeymod must be a module having a key type of versekey (Bibles & commentaries),
    //  otherwise an error is returned.
    
  AString getChapterTextMulti(in ACString Vkeymodlist);
    //Will return chapter text in interlinear style.
    //Footnote markers are NOT included.
    //Vkeymodlist is formatted as follows: "UZV,TR,RSTE". The first module must be a
    //  versekey module or an error is returned. If any successive module is not a
    //  versekey module, it is simply ignored. Verse numbers retured are those of 
    //  the first module listed, subsequent modules return the same reference as
    //  that returned by the first, even though it may have come from a different 
    //  chapter or verse number than did the first.
                                              
  AString getVerseText(in ACString Vkeymod, in AString Vkeytext);
    //Will return the requested verse(s) as raw text, without features such as
    //  verse numbers, note markers, red-words-of-Christ etc.
    //Vkeymod is the module from which to return text. If it's not a versekey
    //  type module, an error is returned.
    //Vkeytext is the "xulsword reference" (see definition above) from which to 
    //  return the text.
    
  long getMaxVerse(in ACString Mod, in AString Vkeytext);
    //Returns the maximum verse number of the chapter refered to by the
    //  xulsword reference Vkeytext, when using the verse system of Mod.

  AString getVerseSystem(in ACString Mod);
    //Returns the verse system of module Mod.
   
  AString convertLocation(in ACString FromVerseSystem, in AString Vkeytext, in ACString ToVerseSystem);
    //Returns location (ie Gen.5.6.7) of Vkeytext (a xulsword reference) in 
    //  FromVerseSystem as it would be specified in ToVerseSystem (so given 
    //  Ps 119:1 from "KJV", it would return Ps.118.1.1 when converted to 
    //  "SynodalProt" or "EASTERN" verse systems).
    //Returned value is always of the form shortBook.chapter.verse.lastVerse
  
/*******************************************************************************
* RETRIEVING FOOTNOTES, CROSS REFERENCES, INTRODUCTIONS, DICTIONARY ENTRIES, ETC.:
*******************************************************************************/              
  AString getBookIntroduction(in ACString Vkeymod, in AString Bname);
    //Will return the introduction for a given short book name in module Vkeymod, 
    //  if one exists in the version. If there is not introduction, "" is returned.
    //If Vkeymod is not a versekey type module, an error is returned.
    
  AString getDictionaryEntry(in ACString Lexdictmod, in AString Key);
    //Will return the dictionary entry, or "" if the entry is not found.
    //An exception is thrown if the dictionary itself is not found, or if the
    //  Lexdictmod is not of type StrKey.           
                    
  AString getAllDictionaryKeys(in ACString Lexdictmod);
    //Returns all keys in form key1<nx>key2<nx>key3<nx>
    //Returns an error is module Lexdictmod is not of type StrKey

  AString getGenBookChapterText(in ACString Gbmod, in AString Treekey);
    //Returns chapter text for key Treekey in GenBook module Gbmod.
    //Returns an error if module Gbmod is not a TreeKey mod.
        
  AString getGenBookTableOfContents(in ACString Gbmod);
    //Returns table of contents RDF code for GenBook module Gbmod.
    //Returns an error if module Gbmod is not a TreeKey mod.    

  //IMPORTANT: THE FOLLOWING ROUTINES MUST BE CALLED AFTER getChapterText IS CALLED!
  AString getFootnotes();
    //Will return the footnotes (or empty string if there aren't any). 
    //See * below.
    
  AString getCrossRefs();
    //Will return the cross references (or empty string if there aren't any). 
    //See * below.
    
  AString getNotes();
    //Will return both footnotes and cross references interleaved.
    //See * below. 
    //order is: v1-footnotes, v1-crossrefs, v2-footnotes, v2-crossrefs, etc


/*******************************************************************************
* SEARCHING: USE THESE TO SEARCH MODULES:
*******************************************************************************/      
  boolean luceneEnabled(in ACString Mod);
    //Will return true if indexed searching is available for the current module, false otherwise.
    
  long search(in ACString Mod, in AString Srchstr, in ACString Scope, in long type, in long flags, in boolean newsearch);
    //Returns the number of matches found
    //Mod is the version to search
    //Srchstr is the string you want to search for.
    //Scope is the scope of the search. For example: "Gen", or "Matt-Rev". 
    //type is the type of search which can take one of the following values:
    // >=0 - regex (use C++ regex matching)
    //  -1 - phrase (only matches EXACTLY the text- including punctuation etc!)
    //  -2 - multiword (match verses that contain all the words in any form or order)
    //  -3 - entryAttribute (eg. Word//Strongs/G1234/) NOT TESTED.
    //  -4 - Lucene fast indexed search (if index is available)
    //  -5 - a compound search
    //flags are many useful flags as defined in regex.h
	  //newsearch should be set to false if you want the search results added to the previous results
	    
  AString getSearchVerses(in ACString Mod);
    //UNEMPLEMENTED AS YET. Returns a list of verse addresses which matched the previous search.
    
  AString getSearchTexts(in ACString Mod, in long first, in long num, in boolean keepStrongs);
    //Will return the verse texts from previous search.
    //See * below
    
  void searchIndexDelete(in ACString Mod);
    //Deletes the search index of Bible.
    
  long searchIndexBuild(in ACString Mod, in long maxwait);
    //Before starting to build a new search index, call "searchIndexDelete()"
    //Returns percent complete after running for "maxwait" seconds.
    //You should call repeatedly until 100 is returned.
  
  
/*******************************************************************************
* SETTING/READING GLOBAL OPTIONS FOR RENDERING SCRIPTURE TEXTS: 
*******************************************************************************/
  void setGlobalOption(in ACString Option, in ACString Setting);
    //"Option" is one of the following and can have a "Setting" of either "Off" or "On":
		//  "Footnotes"
		//  "Headings" 
    //  "Cross-references" 
		//  "Words of Christ in Red" 
		//  "Verse Numbers"
		//  "Hebrew Cantillation"
		//  "Hebrew Vowel Points"
		
  AString getGlobalOption(in ACString Option);
    //Option must one of the above option strings. Either "Off" or "On" will be returned.
        

/*******************************************************************************
* PROVIDING THE DECRYPTION KEY: 
*******************************************************************************/
  void setCipherKey(in ACString Mod, in AString Cipherkey, in boolean useSecModule);
    //Will set the module's key. Key can only be set once.


/*******************************************************************************
* READING MODULE LIST AND MODULE INFORMATION: 
*******************************************************************************/
  AString getModuleList();
    //Returns a string of form: name1;type1<nx>name2;type2<nx> etc... 
    //Returns "No Modules" if there are no modules available.
                            
  AString getModuleInformation(in ACString Mod, in ACString Paramname);
    //Paramname can be anything that is in the module's .conf file.
    //Returns Paramname from conf file of module Mod. 
    //Returns NOTFOUND if the Paramname does not exist in the conf file.
    //Returns empty string if the module Mod does not exist.
    //Returns val1<nx>val2<nx>val3 if there is more than one entry of type infotype (eg. GlobalOptionFilter)
};

/*
* Lists of verses or notes are returned in the following format: 
  identifier<bg/>body<nx/>
  Note: the identifier and <bg/> tag are not returned with getSearchVerses()
*/
