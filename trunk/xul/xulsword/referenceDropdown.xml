<?xml version="1.0"?>  
<!--
    This file is part of xulSword.

    Copyright 2009 John Austin (gpl.programs.info@gmail.com)

    xulSword is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 2 of the License, or
    (at your option) any later version.

    xulSword is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with xulSword.  If not, see <http://www.gnu.org/licenses/>.

!-->

<bindings id="referenceDropdowns" 
          xmlns="http://www.mozilla.org/xbl" 
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" 
          xmlns:xbl="http://www.mozilla.org/xbl">
  <!--
    There are five main input/output parameters: version, book, chapter, verse, lastVerse.
    Each parameter has two possible types of local storage and the type used depends
    on whether the corresponding drop down is hidden or not.
    
    1) Reading: 
        If a menu drop-down (version menu for instance) is hidden then read this._version, 
        otherwise read the drop down's selected value (or read the default if nothing is selected).
    
    2) Setting via script:
        First we check for legal value, and return without doing anything if it's illegal. 
        If drop-down is hidden then set this._(param) and then update next drop-down
        in sequence, otherwise, select new param in dropdown, and update next drop-down in sequence. 
    
    3) Setting via dropdown:
        No need to check value's legality since all menu choices are legal. Just update next
        drop-down in sequence.
        
    Updating Drop Down Menu's:
    Version - Never updates. NOTE: class must be updated in onRefUserUpdate()- doing it here does not work (xulrunner bug?).
    Book - If onlyavailablebooks==true then hide books which are not available.
      Convert location from previous version to current version. If onlyavailablebooks==true
      then check that current version is available and update next drop-down in sequence if it is.
      Otherwise just set book to first available book.
    Chapter - Set chapter to 1. Hide menuitems greater than book's maxchap.
      Update next drop-down in sequence.
    Verse - Set verse to 1. Hide menuitems greater than chapter's maxverse.
      Update next drop-down in sequence.
    LastVerse - Set lastVerse to verse. Hide menuitems less than verse and
      great than chapter's maxverse. Update next drop-down in sequence.
    
    onRefUserUpdate(event, location, version):
    This function is called when the user updates a parameter from the UI. The returned location
    will hold null (empty) values for hidden drop-down parameters UNLESS the user entered
    text data into the book textbox directly, in which case all entered info is returned.
    
  !-->
  
  <binding id="reference-dropdown-main">
    <implementation>
      <constructor><![CDATA[
        this.bookmenulist = document.getAnonymousElementByAttribute(this, "anonid", "book");
        this.chaptermenulist = document.getAnonymousElementByAttribute(this, "anonid", "chapter");
        this.versemenulist = document.getAnonymousElementByAttribute(this, "anonid", "verse");
        this.lastVersemenulist = document.getAnonymousElementByAttribute(this, "anonid", "lastVerse");
        this.versionmenulist = document.getAnonymousElementByAttribute(this, "anonid", "version");
        
        this._finishedAutoComplete=false;
        this._saveTextBoxValue="";
        this._isInit = true;
        this._maskHiddenFields = true;
        
        // Initialize vars
        this._defversion = prefs.getCharPref("DefaultVersion");
        this._defbook = "Gen";
        this._preversion = this._defversion; // Used to convert locations from previous to current verse system
        this._prebook = this._defbook;  // Used during "esc" on book textbox, or when text box input is not an allowable reference
        
        // All books are on list
        for (var b=0; b<NumBooks; b++) {this.bookmenulist.appendItem(Book[b].bNameL, Book[b].sName);}
        
        // Only one chapter, verse, lastVerse for speed (one is needed so that xxx.1.1.1 will work as default!)
        this.addMenuItems(this.chaptermenulist, 1, 1);
        this.addMenuItems(this.versemenulist, 1, 1);
        this.addMenuItems(this.lastVersemenulist, 1, 1);
        
        // All Bible mods and possibly all commentary mods are on list
        this.versions = [];
        var defVersionIndex=-1;
        for (var m=0; m<Tabs.length && Bible; m++) {
          if (Tabs[m].isOrigTab) continue;
          if (Tabs[m].modType != BIBLE) {
            if (this.versionmenulist.getAttribute("onlybibles")=="true") continue;
            if (Tabs[m].modType != COMMENTARY) continue;
          }
          this.versions.push(Tabs[m].modName);
          if (Tabs[m].modName == this._defversion) defVersionIndex=this.versions.length-1;
          var description = Bible.getModuleInformation(Tabs[m].modName, "Description");
          if (description==NOTFOUND) description=null;
          var newitem = this.versionmenulist.appendItem(Tabs[m].label, Tabs[m].modName, description);
          newitem.className = "vstyle" + Tabs[m].vstyle;
        }
        
        // Initialize location vars and selections
        if (this.versionmenulist.hidden) this._version = this._defversion;
        else {
          this.versionmenulist.selectedIndex = defVersionIndex;
          this._version = null;
        }
        if (this.bookmenulist.hidden) this._book = this._defbook;
        else {
          this.bookmenulist.selectedIndex = findBookNum(this._defbook);
          this._book = null;
        }
        if (this.chaptermenulist.hidden) this._chapter = 1;
        else {
          this.chaptermenulist.selectedIndex = 0;
          this._chapter = null;
        }
        if (this.versemenulist.hidden) this._verse = 1;
        else {
          this.versemenulist.selectedIndex = 0;
          this._verse = null;
        }
        if (this.lastVersemenulist.hidden) this._lastVerse = 1;
        else {
          this.lastVersemenulist.selectedIndex = 0;
          this._lastVerse = null;
        }
        
        // Fill out menu list lists for default location
        this.version = this._defversion;
        this.location = this._defbook + ".1.1.1";
        this._isInit = false;
        
      ]]></constructor>
      
      <method name="addMenuItems">
        <parameter name="aMenuList"/>
        <parameter name="aNumber"/>
        <parameter name="maxLength"/>
        <body><![CDATA[
          if (!aMenuList.menupopup) aMenuList.appendItem(dString(1), 1);
          for (var i=aMenuList.menupopup.childNodes.length+1; (i<=aNumber && i<=maxLength); i++) {
          var newitem = aMenuList.appendItem(dString(i), i);
//jsdump("Added menu item " + dString(i) + ".\n");
        }
        ]]>
        </body>
      </method>
      
      <property name="version">
        <getter><![CDATA[
          if (this.versionmenulist.hidden) return this._version;
          var selection = this.versionmenulist.selectedItem;
          if (selection) selection = selection.getAttribute("value");
          if (selection==null)
            return this._defversion;
          return selection;
        ]]></getter>
        <setter><![CDATA[
          var current = this.version;
          if (val==current && !this._isInit) return current;
          
          for (var v=0; v<this.versions.length; v++) {if (this.versions[v]==val) break;}
          if (v==this.versions.length) return current;
          this.versionmenulist.className = "vstyle" + val; //this does not work after first pass!
          if (!this.versionmenulist.hidden)
            this.versionmenulist.selectedIndex = v;
          else this._version=val;
          
          this.updateMenuBook();
          return val;
        ]]></setter>
      </property>
      
      <property name="book">
        <getter><![CDATA[
          if (this.bookmenulist.hidden) return this._book;
          var selection = this.bookmenulist.selectedItem;
          if (selection) selection = selection.getAttribute("value");
          if (selection==null) {
            this.bookmenulist.value=null;
            this.bookmenulist.selectedIndex = findBookNum(this._prebook);
            return this._prebook;
          }
          else return selection;
        ]]></getter>
        <setter><![CDATA[
          var current = this.book;
          if (val==current && !this._isInit) return current;
          
          if (this.bookmenulist.getAttribute("onlyavailablebooks")=="true")
            var showBooks = getAvailableBooks(this.version);
          else {
            showBooks = [];
            for (var b=0; b<Book.length; b++) {showBooks.push(Book[b].sName);}
          }
          if (!showBooks || !showBooks[0]) showBooks = [this._defbook];
          
          for (var v=0; v<showBooks.length; v++) {if (showBooks[v]==val) break;}
          if (v==showBooks.length) return current;
          
          if (!this.bookmenulist.hidden)
            this.bookmenulist.selectedIndex = findBookNum(val);
          else this._book = val;
          
          this._prebook = val;
          
          this.updateMenuChapter();
          return val;
        ]]></setter>
      </property>
      
      <property name="chapter">
        <getter><![CDATA[
          if (this.chaptermenulist.hidden) return this._chapter;
          var selection = this.chaptermenulist.selectedItem;
          if (selection) selection = selection.getAttribute("value");
          if (selection==null) {
            this.chaptermenulist.selectedIndex = 0;
            return 1;
          }
          return Number(selection);
        ]]></getter>
        <setter><![CDATA[
          var current = this.chapter;
          if (val == current && !this._isInit) return current;
          
          var book = this.book;
          
          if (val<1 || val>Book[findBookNum(book)].numChaps) return current;
          if (!this.chaptermenulist.hidden) {
            if (val > this.chaptermenulist.menupopup.childNodes.length) 
              this.addMenuItems(this.chaptermenulist, val, MAXCHAPTER);
            this.chaptermenulist.selectedIndex = Number(val)-1;
          }
          else this._chapter = val;
          
          this.updateMenuVerse();
          return val;
        ]]></setter>
      </property>
      
      <property name="verse">
        <getter><![CDATA[
          if (this.versemenulist.hidden) return this._verse;
          var selection = this.versemenulist.selectedItem;
          if (selection) selection = selection.getAttribute("value");
          if (selection==null) {
            this.versemenulist.selectedIndex = 0;
            return 1;
          }
          return Number(selection);
        ]]></getter>
        <setter><![CDATA[
          var current = this.verse;
          if (val == current && !this._isInit) return current;
          if (!Bible || val<1 || val>this.getMaxVerse(this.version, this.book + " " + this.chapter)) return current;
          
          if (!this.versemenulist.hidden) {
            if (val > this.versemenulist.menupopup.childNodes.length) 
              this.addMenuItems(this.versemenulist, val, MAXVERSE);
            this.versemenulist.selectedIndex = Number(val)-1; 
          }
          else this._verse = val;
          
          this.updateMenuLastVerse();
          return val;
        ]]></setter>
      </property>
      
      <property name="lastVerse">
        <getter><![CDATA[
          if (this.lastVersemenulist.hidden) return this._lastVerse;
          var selection = this.lastVersemenulist.selectedItem;
          if (selection) selection = selection.getAttribute("value");
          if (selection==null) {
            this.lastVersemenulist.selectedIndex = 0;
            return this.verse;
          }
          return Number(selection);
        ]]></getter>
        <setter><![CDATA[
          var current = this.lastVerse;
          if (val==current && !this._isInit) return current;
          
          var version = this.version;
          var book = this.book;
          var chapter = this.chapter;
          var verse = this.verse;
          
          if (val < verse) val = verse;
          else {
            var maxverse = this.getMaxVerse(version, book + " " + chapter);
            if (val > maxverse) val = maxverse;
          }
          if (!this.lastVersemenulist.hidden) {
            if (val > this.lastVersemenulist.menupopup.childNodes.length) 
              this.addMenuItems(this.lastVersemenulist, val, MAXVERSE);            
            this.lastVersemenulist.selectedIndex = Number(val)-1; 
          }
          else this._lastVerse = val;
          
          return val;
        ]]></setter>
      </property>
      
      <!-- location has form: bk.ch.vs[.lv] !-->
      <property name="location">
        <getter><![CDATA[
          var rval = "";
          rval += (this._maskHiddenFields && this.bookmenulist.hidden ? "":this.book);
          rval += ".";
          rval += (this._maskHiddenFields && this.chaptermenulist.hidden ? "":this.chapter);
          rval += ".";
          rval += (this._maskHiddenFields && this.versemenulist.hidden ? "":this.verse);
          rval += ".";
          rval += (this._maskHiddenFields && this.lastVersemenulist.hidden ? "":this.lastVerse);
          return rval;
        ]]></getter>
        <setter><![CDATA[
          var parts = val.split(".");
          if (parts && parts.length && parts.length>1) {
            this.book = parts[0] ? parts[0]:this.book;
            this.chapter = parts[1] ? parts[1]:this.chapter;
            this.verse = parts[2] ? parts[2]:this.verse;
            this.lastVerse = parts[3] ? parts[3]:parts[2];
          }
          val = this.book + "." + this.chapter + "." + this.verse + "." + this.lastVerse;
          return val
        ]]></setter>
      </property>
      
      <method name="getMaxVerse">
        <parameter name="version"/>
        <parameter name="bkch"/>
        <body><![CDATA[
          if (!Bible) {return 1;}
          try {var retval = Bible.getMaxVerse(version, bkch);}
          catch(er) {retval = 1;}
          return retval;
        ]]></body>
      </method>
      
      <method name="updateMenuBook">
        <parameter name="aEvent"/>
        <body><![CDATA[
          if (this.bookmenulist.getAttribute("onlyavailablebooks")=="true")
            var showBooks = getAvailableBooks(this.version);
          else {
            showBooks = [];
            for (var b=0; b<Book.length; b++) {showBooks.push(Book[b].sName);}
          }
          if (!showBooks || !showBooks[0]) showBooks = [this._defbook];
        
          // Check now if we will need to change to a different book...
          var currentBookIsAvailable = true;
          for (var a=0; a<showBooks.length; a++) {if (showBooks[a]==this.book) break;}
          if (a == showBooks.length) currentBookIsAvailable=false;
          
          if (currentBookIsAvailable) {
            var convertedLocation = Bible ? Bible.convertLocation(Bible.getVerseSystem(this._preversion), this.location, Bible.getVerseSystem(this.version)):this.location;
            this._preversion = this.version;
          }
          
          if (!this.bookmenulist.hidden) {
            var menuItem = this.bookmenulist.menupopup.firstChild;
            while (menuItem) {
              menuItem.hidden=true;
              for (var a=0; a<showBooks.length; a++) {if (menuItem.getAttribute("value")==showBooks[a]) break;}
              if (a < showBooks.length) {
                menuItem.hidden=false;
              }
              menuItem = menuItem.nextSibling;
            }
          }
          
          if (currentBookIsAvailable) this.location = convertedLocation;
          else this.book = showBooks[0];
          if (aEvent) onRefUserUpdate(aEvent, this.location, this.version);
        ]]></body>
      </method>
      
      <method name="updateMenuChapter">
        <parameter name="aEvent"/>
        <body><![CDATA[
          if (!this.chaptermenulist.hidden) {
            var maxChapter = Book[findBookNum(this.book)].numChaps;
            var menuItem = this.chaptermenulist.menupopup.firstChild;
            while (menuItem) {
              menuItem.hidden=true;
              var mychap = Number(menuItem.getAttribute("value"));
              if (mychap<=maxChapter) menuItem.hidden=false;
              menuItem = menuItem.nextSibling;
            }
            if (maxChapter > this.chaptermenulist.menupopup.childNodes.length) 
              this.addMenuItems(this.chaptermenulist, maxChapter, MAXCHAPTER);
            this.chaptermenulist.selectedIndex=0;
            //if (!this.chaptermenulist.selectedItem) this.chaptermenulist.selectedItem=0; //Needed for init!
            //if (this.chaptermenulist.selectedItem.hidden) this.chaptermenulist.selectedIndex = maxChapter-1;
          }
          else this._chapter=1;
          
          this.updateMenuVerse(aEvent);
        ]]></body>
      </method>
      
      <method name="updateMenuVerse">
        <parameter name="aEvent"/>

        <body><![CDATA[
          if (!this.versemenulist.hidden) {
            var maxVerse = this.getMaxVerse(this.version, this.book + " "  + this.chapter);
            var menuItem = this.versemenulist.menupopup.firstChild;
            while (menuItem) {
              menuItem.hidden=true;
              if (Number(menuItem.getAttribute("value"))<=maxVerse) menuItem.hidden=false;
              menuItem = menuItem.nextSibling;
            }
            if (this.versemenulist.menupopup.childNodes.length < maxVerse)
              this.addMenuItems(this.versemenulist, maxVerse, MAXVERSE);
            this.versemenulist.selectedIndex = 0;
            //if (!verseListElem.selectedItem) verseListElem.selectedItem=0; //Needed for init!
            //if (verseListElem.selectedItem.hidden) verseListElem.selectedIndex = (isLastVerse ? verse-1:maxVerse-1);
          }
          else this._verse=1;
          
          this.updateMenuLastVerse(aEvent);
        ]]></body>
      </method>
      
      <method name="updateMenuLastVerse">
        <parameter name="aEvent"/>

        <body><![CDATA[
          if (!this.lastVersemenulist.hidden) {
            var maxVerse = this.getMaxVerse(this.version, this.book + " "  + this.chapter);
            var menuItem = this.lastVersemenulist.menupopup.firstChild;
            while (menuItem) {
              menuItem.hidden=true;
              var myverse = Number(menuItem.getAttribute("value"));
              if (myverse>=this.verse && myverse<=maxVerse)
                menuItem.hidden=false;
              menuItem = menuItem.nextSibling;
            }
            if (this.lastVersemenulist.menupopup.childNodes.length < maxVerse)
              this.addMenuItems(this.lastVersemenulist, maxVerse, MAXVERSE);
            this.lastVersemenulist.selectedIndex = this.verse-1;
            //if (!verseListElem.selectedItem) verseListElem.selectedItem=0; //Needed for init!
            //if (verseListElem.selectedItem.hidden) verseListElem.selectedIndex = (isLastVerse ? verse-1:maxVerse-1);
          }
          else this._lastVerse=this.verse;
          
          if (aEvent) onRefUserUpdate(aEvent, this.location, this.version);
        ]]></body>
      </method>
      
      <method name="updateFromTextBox">
        <parameter name="aEvent" />
        <body><![CDATA[
          //NOTE: menulist.value is the actual value of the textbox, 
          //while menulist.getAttribute("value") is the internal value of the textbox(?)
          //menulist.value must be set to null before any selection can be made
//dump(this.bookmenulist.selectedItem + " " + this.bookmenulist.value + " " + this._prebook + "\n");
          if (this.bookmenulist.selectedItem) {
            if (this.book != this._prebook) this.updateMenuChapter(aEvent);
            return;
          }
          
          var text = this.bookmenulist.value;
          this.bookmenulist.value="";         
          
          var newloc = parseLocation(text);
          if (!newloc) {
            this.bookmenulist.selectedIndex = findBookNum(this._prebook);
            return;
          }
          var needUpdate = false;
          if (newloc.shortName && newloc.shortName != this._prebook) {
            this.book = newloc.shortName;
            needUpdate = true;
          }
          else this.bookmenulist.selectedIndex = findBookNum(this._prebook); 
           
          if (newloc.chapter!=null) {this.chapter = newloc.chapter; needUpdate = true;}
          if (newloc.verse!=null) {this.verse = newloc.verse; needUpdate = true;}
          if (newloc.lastVerse!=null && newloc.lastVerse > this.verse) {this.lastVerse = newloc.lastVerse; needUpdate = true;}
          this._maskHiddenFields = false; // Tell this.location getter NOT to maks hidden params
          if (needUpdate && aEvent) onRefUserUpdate(aEvent, this.location, this.version);
          this._maskHiddenFields = true;
        ]]></body>
      </method>
      
      <method name="onbookkeyup">
        <parameter name="aEvent" />
        <body><![CDATA[
          // Implements an autofill textbox. When book is determinate from entered info,
          // the book is autocompleted and letter keys are ignored until "space" or "backspace"
          // is pressed. Pressing "escape" restores original value and pressing "enter" runs
          // updateFromTextBox.

          //control+down-arrow (sometimes used to select text box)
          if (aEvent.which==40 || aEvent.which==17) return;
          
          //backspace
          if (aEvent.which==8) {this._finishedAutoComplete=false; return;}
          
          //carriage return
          if (aEvent.which==13) {
            this.updateFromTextBox(aEvent);
            return;
          }
          
          //escape
          if (aEvent.which==27) {this.bookmenulist.value=Book[findBookNum(this._prebook)].bNameL; return;}
          
          //letter keys
          if ((aEvent.which<48 || aEvent.which>58) && this._finishedAutoComplete) {this.bookmenulist.value = this._saveTextBoxValue; return;}

          this._saveTextBoxValue = this.bookmenulist.value;
          var found=false;
          var cnt=0;
          this._finishedAutoComplete=false;
          for (var b=0; b<NumBooks; b++) {
            var tv = this._saveTextBoxValue.toLowerCase();
            var ms = Book[b].bName.substr(0,this._saveTextBoxValue.length).toLowerCase();
            var ml = Book[b].bNameL.substr(0,this._saveTextBoxValue.length).toLowerCase();
            if (tv==ms || tv==ml) {
              cnt++;
              var bname = Book[b].bNameL;
            }
          }
          if (cnt==1) {
            this._finishedAutoComplete=true; 
            this.bookmenulist.value = bname + " "; 
            this._saveTextBoxValue = bname + " ";
          }
        ]]></body>
      </method>
    </implementation>
  </binding>
  
  <!-- hideversion !-->
  <!-- hidebook !-->
  <!-- hidechapter !-->
  <!-- hideverse !-->
  <!-- hidelastverse !-->
  <!-- onlybibles !-->
  <!-- onlyavailablebooks !-->

  <!-- Reference Dropdown -->
  <binding id="reference-dropdown" extends="chrome://xulsword/content/referenceDropdown.xml#reference-dropdown-main">
    <xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xbl="http://www.mozilla.org/xbl">
      <hbox flex="" xbl:inherits="flex">
        <menulist anonid="book"
          oncommand="this.parentNode.parentNode.updateFromTextBox(event);"
          onchange="this.parentNode.parentNode.updateFromTextBox(event);"
          onkeydown="if (event.which==13 || event.which==27) {event.preventDefault();}"
          onkeyup="this.parentNode.parentNode.onbookkeyup(event);"
          ondblclick="this.select();"
          onclick="this.parentNode.parentNode._finishedAutoComplete=false;"
          sizetopopup="always" editable="true" flex="" onlyavailablebooks="false" hidden="false"
          xbl:inherits="onlyavailablebooks, flex, sizetopopup, editable, hidden=hidebook, disabled" />
          
        <menulist anonid="chapter"
          sizetopopup="never" 
          oncommand="this.parentNode.parentNode.updateMenuVerse(event);" 
          hidden="false" xbl:inherits="hidden=hidechapter, disabled" />  
              
        <label value=":" 
          hidden="false" xbl:inherits="hidden=hideverse"
          style="font-weight:bold; padding-top:3px; -moz-margin-start:3px; -moz-margin-end:2px;"/>
          
        <menulist anonid="verse"
          sizetopopup="never" 
          oncommand="this.parentNode.parentNode.updateMenuLastVerse(event);"
          hideverse="false" xbl:inherits="hidden=hideverse, disabled" />    
           
        <label value="&#8211;" 
          hidden="false" xbl:inherits="hidden=hidelastverse"
          style="font-weight:bold; padding-top:3px; -moz-margin-start:1px; -moz-margin-end:1px;"/>
          
        <menulist anonid="lastVerse"
          sizetopopup="never" 
          oncommand="onRefUserUpdate(event, this.parentNode.parentNode.location, this.parentNode.parentNode.version);" 
          hidden="false" xbl:inherits="hidden=hidelastverse, disabled" />
          
        <spacer width="27px" />
        
        <menulist anonid="version" 
          sizetopopup="never" 
          oncommand="this.parentNode.parentNode.updateMenuBook(event);" 
          onlybibles="false" hidden="false" xbl:inherits="hidden=hideversion, onlybibles, disabled" />
      </hbox>
    </xbl:content>
  </binding>
</bindings>
