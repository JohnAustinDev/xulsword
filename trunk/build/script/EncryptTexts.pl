#!/usr/bin/perl
#usage EncryptTexts.pl MK MKS MKO useSecurityMod moduleVersion bibleTextEncryptionKey chromeCode.h modname1 modname2 ...

$MK = shift;
$MKS = shift;
$MKO = shift;

$usesecm = shift;
$version = shift;
$progkey = shift;
$codfile = shift;
$encryptedTexts = shift;
$log = "$MKS\\moduleDev\\swordmk-mods\\module_log.txt";

$keyfile = "$MKS\\moduleDev\\swordmk-mods\\keys.txt";

$encryptedTexts =~ s/(^\s*|\"|\s*$)//g;
@EncryptedTexts = split(/\s*,\s*/, $encryptedTexts);

&logit("\n\n------------------------------------------\nEncryptTexts.pl\n" . `date /T` . `time /T`);

# Read encryption codes of current texts
open(INF, "<$keyfile");
while(<INF>) {
  $_ =~ /(\S+):(\S+)/;
  $lastkeys{$2}=$1;
}
close(INF);

# If we are using the security module, then read an updated chromCode.h file 
# (generated by MK compiled with "DUMPCODES") and save the keys for each of the texts.
if ($usesecm eq "true") {
  if (!open(INF, "<$codfile")) {&logit("Could not open $codfile.\n"); &dienow;}
  while(<INF>) {
    $_ =~ /(\S+):$version:(\S+)/;
    $newkeys{$2}=$1;
  }
  close(INF);
  if (!open(OUTF, ">$keyfile")) {&logit("Could not open $keyfile.\n"); &dienow;}
}

# If the new key is different than the old key, then re-encrpyt the text(s).
while($EncryptedTexts[0]) {
  $mod = shift(@EncryptedTexts);
  $modlc = lc($mod);
      
  if ($usesecm ne "true") {$key = $progkey;}
  else {
    if (!$newkeys{$mod}) {&logit("No key for $mod!\n"); &dienow;}
    $key = $progkey . $newkeys{$mod};
  }
  
  #Encrypt only if we need to...
  if (!$lastkeys{$mod} || $lastkeys{$mod} ne $key) {
    &logit("\n--------------- ENCRYPTING MODULE $mod ---------------\n");
    $vsys = "KJV";
    $osis = "$MKS\\moduleDev\\swordmk-mods\\$mod\\$mod.xml";
    $conf = "$MKS\\moduleDev\\swordmk-mods\\mods.d\\$modlc.conf";
    $mdir = "$MKS\\moduleDev\\swordmk-mods\\modules\\texts\\ztext\\$modlc";
    if (!open(VSYS, "<$conf")) {&logit("Conf file $conf not found."); &dienow;}
    while (<VSYS>) {
      if ($_ =~ /Versification\s*=\s*(.*)$/) {$vsys=$1;}
      if ($_ =~ /CipherKey\s*=/) {$hasCK = "true";}
    }
    close(VSYS);
    if ($hasCK ne "true") {
      if (!open(VSYS, ">>$conf")) {&logit("Conf file $conf could not write."); &dienow;}
      print VSYS "\nCipherKey=\n";
      close(VSYS);
    }

    # clean old module out
    if (-e $mdir) {`rmdir /Q /S \"$mdir\" >> \"$log\"`;}
    `mkdir \"$mdir\"`;
    
    # make encrypted module
    `\"$MK\\Cpp\\swordMK\\utilities\\bin\\osis2mod.exe\" \"$mdir\" \"$osis\" -N -v $vsys -z -c $key >> \"$log\"`;
  }
  else {&logit("$mod already encrypted to $key.\n");}
  print OUTF "$key:$mod\n";
}
close(OUTF);
close(LOG);

sub logit($) {
  my $l = shift;
  open(LOGF, ">>$log") || die "Could not open log file $log\n";
  print LOGF $l;
  close(LOGF);
}

sub dienow {close(LOG); die;}
