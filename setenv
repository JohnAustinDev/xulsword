#!/bin/bash
# Run this script from this directory with 'source ./setenv' to set build environment variables.

if [ -e /vagrant ]; then export CONTEXT="xsguest"; else export CONTEXT="host"; fi
if [ "$CONTEXT" = "xsguest" ]; then export XULSWORD="$HOME/src/xulsword"; else export XULSWORD="$( pwd -P )"; fi
export CPP="$XULSWORD/Cpp"
export LIBXULSWORD="$XULSWORD/libxulsword"

# Set to x86_64-w64-mingw32 to cross-compile to 64 bit windows, or set to
# i686-w64-mingw32 to cross-compile to 32 bit windows:
export TOOLCHAIN_PREFIX=x86_64-w64-mingw32

export ADDRESS_MODEL=32
export WINMACHINE=x86
if [ "$TOOLCHAIN_PREFIX" = "x86_64-w64-mingw32" ]; then
  export ADDRESS_MODEL=64
  export WINMACHINE=x64
fi

export XCWD="${ADDRESS_MODEL}win"

# The ming-gcc cross-compiler standard must be 'posix' for NodeAPI:
export GCCSTD=posix

export BOOSTDIR="$XULSWORD/Cpp/boost-${TOOLCHAIN_PREFIX}-${XCWD}"
export DLLDIR="$XULSWORD/Cpp/install.$XCWD/dll"

# svn rev 3563 is sword-1.8.1
export swordRev=3563

# Node-gyp can be put into cross-compile mode by calling setxce with a toolchain
# argument. However, there is no sane way to actually cross-compile a node-gyp addon
# so that hope has been abandoned for now.
# source ./setxce $TOOLCHAIN_PREFIX
