#!/bin/bash
# Run this script from this directory with 'source ./setenv' to set build environment variables.

# - NODE_ENV - Set in package.json to control the build process
#     (will be set to either 'development' or 'production').
#NODE_ENV=production
NODE_ENV=development

# - DEBUG_PROD - Set by you to 'true' BEFORE packaging to enable
#     dev source maps and dev-tools in a production build (but the
#     main process is still not accesible via current vscode config).
#     Also enables other production debug behaviour (more logging).
DEBUG_PROD=false

# - XULSWORD_ENV - Set by you to 'production' for debugging production
#     only behaviour, like i18n, splash and log, in a development
#     environment (including main process debugging via vscode).
XULSWORD_ENV=normal

# - LOGLEVEL - Set to "silly" | "info" | "debug" | "error" | "warn" | "verbose"
LOGLEVEL=error

export LIBXULSWORD_MAJOR=1
export LIBXULSWORD_MINOR=5
export LIBXULSWORD_REVIS=6

if [[ -z "$LIBXULSWORD_ONLY" ]]; then
  export LIBXULSWORD_ONLY=no
fi

if [ -e /vagrant ]; then export CONTEXT="guest"; else export CONTEXT="host"; fi
export XULSWORD="$( pwd -P )"
export CPP="$XULSWORD/Cpp"
export LIBXULSWORD="$XULSWORD/build/app/node_modules/libxulsword"

# Set WINMACHINE to x86 or x64 to compile Windows 32 bit or 64 bit, respectively.
# Or set to 'no' to skip compile for windows.
if [[ -z "$WINMACHINE" ]]; then
  export WINMACHINE=x86
fi
export TOOLCHAIN_PREFIX=i686-w64-mingw32
export ADDRESS_MODEL=32
if [ "$WINMACHINE" = "x64" ]; then
  export ADDRESS_MODEL=64
  export TOOLCHAIN_PREFIX=x86_64-w64-mingw32
fi

export XCWD="${ADDRESS_MODEL}win"

# The ming-gcc cross-compiler standard must be 'posix' to work with NodeAPI:
export GCCSTD=posix
